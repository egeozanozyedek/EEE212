ORG 0

	acall	CONFIGURE_LCD
	Mov R1,#40
	mov  42,#'f'
	mov  41,#'='
	mov  38,#'H'
	mov  37,#'z'
	Mov R0,#33
	mov  35,#'D'
	mov  34,#'='
	mov  31,#'%'
	
KEYBOARD_LOOP:
	acall KEYBOARD
	;now, A has the key pressed
	acall send_data
	Mov @R1,A
	DEC R1
	CJNE R1,#38,KEYBOARD_LOOP 
key:	acall KEYBOARD
	acall send_data
	Mov @R0,A
	DEC R0
	CJNE R0,#31,KEY 
	acall CONFIGURE_LCD
	acall det
	acall duty
	sjmp KEYBOARD_LOOP

det:
	Mov R2,40
	Mov R3,39
	Acall Table
	ACALL Get_Freq



	Mov R0,#42
print_freq:	Mov A,@R0
 	acall send_data
 	dec R0
	CJNE R0,#36,print_freq
	mov a,#0ABH	;FORCE CURSOR TO BEGINNING OF THE SECOND LINE
	acall SEND_COMMAND
	Mov R0,#35
	Mov 32,#'0'
print_duty:	Mov A,@R0
	acall send_data
	dec R0
	CJNE R0,#30,print_duty
	ret 



DELAYD:
	MOV R6, 50
    H2: MOV r7, 51
    H1: DJNZ R7,H1
	DJNZ R6,H2
	RET

Table:
	CJNE R2,#'0', One	
	acall DELAY_0
	mov DPTR,#PI0
	sjmp fin
One:	CJNE R2,#'1',Two
	acall DELAY_1	
 	mov DPTR,#PI1
 	sjmp fin
Two:	CJNE R2,#'2',Three	
	acall DELAY_2
	mov DPTR,#PI2
	sjmp fin
Three:	CJNE R2,#'3',four	
	acall DELAY_3
 	mov DPTR,#PI3
 	sjmp fin
Four:	CJNE R2,#'4',Five	
	acall DELAY_4
 	mov DPTR,#PI4
 	sjmp fin
Five:	CJNE R2,#'5',Six	
	acall DELAY_5
 	mov DPTR,#PI5
 	sjmp fin
Six:	CJNE R2,#'6',Seven	
	acall DELAY_6
	mov DPTR,#PI6
	sjmp fin
Seven:	CJNE R2,#'7',eight	
	acall DELAY_7
	mov DPTR,#PI7
 	sjmp fin
Eight:	CJNE R2,#'8',Nine	
	acall DELAY_8
 	mov DPTR,#PI8
 	sjmp fin	
Nine:	CJNE R2,#'9',fin	
	acall DELAY_9
 	mov DPTR,#PI9		
fin:	ret



Delay_0:
	mov DPTR,#First_D0
	clr A
	Mov A,R3
	ACALL TO_HEX
	Movc A, @A+DPTR
	Mov 50, A
	clr A
	mov DPTR,#SEC_D0
	clr A
	Mov A,R3
	ACALL TO_HEX
	Movc A, @A+DPTR
	Mov 51, A
	clr A
	ret
Delay_1:
	mov DPTR,#First_D1
	clr A
	Mov A,R3
	ACALL TO_HEX
	Movc A, @A+DPTR
	Mov 50, A
	clr A
	mov DPTR,#SEC_D1
	clr A
	Mov A,R3
	ACALL TO_HEX
	Movc A, @A+DPTR
	Mov 51, A
	clr A
	ret
Delay_2:
	mov DPTR,#First_D2
	clr A
	Mov A,R3
	ACALL TO_HEX
	Movc A, @A+DPTR
	Mov 50, A
	clr A
	mov DPTR,#SEC_D2
	clr A
	Mov A,R3
	ACALL TO_HEX
	Movc A, @A+DPTR
	Mov 51, A
	clr A
	ret
Delay_3:
 	mov DPTR,#First_D3
	clr A
	Mov A,R3
	ACALL TO_HEX
	Movc A, @A+DPTR
	Mov 50, A
	clr A
	mov DPTR,#SEC_D3
	clr A
	Mov A,R3
	ACALL TO_HEX
	Movc A, @A+DPTR
	Mov 51, A
	clr A
	ret
Delay_4:
	mov DPTR,#First_D4
	clr A
	Mov A,R3
	ACALL TO_HEX
	Movc A, @A+DPTR
	Mov 50, A
	clr A
	mov DPTR,#SEC_D4
	clr A
	Mov A,R3
	ACALL TO_HEX
	Movc A, @A+DPTR
	Mov 51, A
	clr A
	ret
Delay_5:
	mov DPTR,#First_D5
	clr A
	Mov A,R3
	ACALL TO_HEX
	Movc A, @A+DPTR
	Mov 50, A
	clr A
	mov DPTR,#SEC_D5
	clr A
	Mov A,R3
	ACALL TO_HEX
	Movc A, @A+DPTR
	Mov 51, A
	clr A
	ret
Delay_6:
	mov DPTR,#First_D6
	clr A
	Mov A,R3
	ACALL TO_HEX
	Movc A, @A+DPTR
	Mov 50, A
	clr A
	mov DPTR,#SEC_D6
	clr A
	Mov A,R3
	ACALL TO_HEX
	Movc A, @A+DPTR
	Mov 51, A
	clr A
	ret
Delay_7:
	mov DPTR,#First_D7
	clr A
	Mov A,R3
	ACALL TO_HEX
	Movc A, @A+DPTR
	Mov 50, A
	clr A
	mov DPTR,#SEC_D7
	clr A
	Mov A,R3
	ACALL TO_HEX
	Movc A, @A+DPTR
	Mov 51, A
	clr A
	ret
Delay_8:
	mov DPTR,#First_D8
	clr A
	Mov A,R3
	ACALL TO_HEX
	Movc A, @A+DPTR
	Mov 50, A
	clr A
	mov DPTR,#SEC_D8
	clr A
	Mov A,R3
	ACALL TO_HEX
	Movc A, @A+DPTR
	Mov 51, A
	clr A
	ret
Delay_9:
	mov DPTR,#First_D9
	clr A
	Mov A,R3
	ACALL TO_HEX
	Movc A, @A+DPTR
	Mov 50, A
	clr A
	mov DPTR,#SEC_D9
	clr A
	Mov A,R3
	ACALL TO_HEX
	Movc A, @A+DPTR
	Mov 51, A
	clr A
	ret
								
		





TO_HEX:
	ANL A,#00001111b
	ret
 
Get_Freq:    
	clr A
	Mov A,R3
	ACALL TO_HEX
	movc A, @A+DPTR; get ASCII code from the table
	Mov 40,A
	clr A
	Mov A,R3
	Inc A
	ACALL TO_HEX
	movc A, @A+DPTR; get ASCII code from the table
	Mov 39,A
 	ret


DUTY:
	Mov R4,33
	setb P2.7
	CJNE R4,#'8',Duty6_H
	acall DelayD
	acall DelayD
	acall DelayD
	acall DelayD
Duty6_H:CJNE R4,#'6',Duty4_H	
	acall DelayD
	acall DelayD
	acall DelayD
Duty4_H:CJNE R4,#'4',Duty2_H
	acall DelayD
	acall DelayD
Duty2_H:CJNE R4,#'2', FINISH_H
	acall DelayD
Finish_H: clr P2.7
        CJNE R4,#'8',Duty6_L
	acall DelayD
Duty6_L:CJNE R4,#'6',Duty4_L	
	acall DelayD
	acall DelayD
Duty4_L:CJNE R4,#'4',Duty2_L
	acall DelayD
	acall DelayD
	acall DelayD
Duty2_L:CJNE R4,#'2', FINISH_L
	acall DelayD	
	acall DelayD
	acall DelayD
	acall DelayD
Finish_L: sjmp Duty
	ret



	
CONFIGURE_LCD:	;THIS SUBROUTINE SENDS THE INITIALIZATION COMMANDS TO THE LCD
	mov a,#38H	;TWO LINES, 5X7 MATRIX
	acall SEND_COMMAND
	mov a,#0FH	;DISPLAY ON, CURSOR BLINKING
	acall SEND_COMMAND
	mov a,#06H	;INCREMENT CURSOR (SHIFT CURSOR TO RIGHT)
	acall SEND_COMMAND
	mov a,#01H	;CLEAR DISPLAY SCREEN
	acall SEND_COMMAND
	mov a,#80H	;FORCE CURSOR TO BEGINNING OF THE FIRST LINE
	acall SEND_COMMAND
	ret



SEND_COMMAND:
	mov p1,a		;THE COMMAND IS STORED IN A, SEND IT TO LCD
	clr p3.5		;RS=0 BEFORE SENDING COMMAND
	clr p3.6		;R/W=0 TO WRITE
	setb p3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	acall DELAY
	clr p3.7
	ret


SEND_DATA:
	mov p1,a		;SEND THE DATA STORED IN A TO LCD
	setb p3.5	;RS=1 BEFORE SENDING DATA
	clr p3.6		;R/W=0 TO WRITE
	setb p3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	acall DELAY
	clr p3.7
	ret


DELAY:
	push 0
	push 1
	mov r0,#50
DELAY_OUTER_LOOP:
	mov r1,#255
	djnz r1,$
	djnz r0,DELAY_OUTER_LOOP
	pop 1
	pop 0
	ret


KEYBOARD: ;takes the key pressed from the keyboard and puts it to A
	mov	P0, #0ffh	;makes P0 input
K1:
	mov	P2, #0	;ground all rows
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, K1
K2:
	acall	DELAY
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, KB_OVER
	sjmp	K2
KB_OVER:
	acall DELAY
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, KB_OVER1
	sjmp	K2
KB_OVER1:
	mov	P2, #11111110B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_0
	mov	P2, #11111101B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_1
	mov	P2, #11111011B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_2
	mov	P2, #11110111B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_3
	ljmp	K2
	
ROW_0:
	mov	DPTR, #KCODE0
	sjmp	KB_FIND
ROW_1:
	mov	DPTR, #KCODE1
	sjmp	KB_FIND
ROW_2:
	mov	DPTR, #KCODE2
	sjmp	KB_FIND
ROW_3:
	mov	DPTR, #KCODE3
KB_FIND:
	rrc	A
	jnc	KB_MATCH
	inc	DPTR
	sjmp	KB_FIND
KB_MATCH:
	clr	A
	movc	A, @A+DPTR; get ASCII code from the table 
	ret

;ASCII look-up table 
KCODE0:	DB	'1', '2', '3', 'A'
KCODE1:	DB	'4', '5', '6', 'B'
KCODE2:	DB	'7', '8', '9', 'C'
KCODE3:	DB	'*', '0', '#', 'D'

  

PI0: DB '8','9','7','9','3','2','3','8','4','6'
PI1: DB '2','6','4','3','3','8','3','2','7','9'
PI2: DB '5','0','2','8','8','4','1','9','7','1'
PI3: DB '6','9','3','9','9','3','7','5','1','0'
PI4: DB '5','8','2','0','9','7','4','9','4','4'
PI5: DB '5','9','2','3','0','7','8','1','6','4'
PI6: DB '0','6','2','8','6','2','0','8','9','9'
PI7: DB '8','6','2','8','0','3','4','8','2','5'
PI8: DB '3','4','2','1','1','7','0','6','7','9'
PI9: DB '8','2','1','4','8','0','8','6','5','1','3'

FIRST_D0: DB 5,5,11,4,12,24,25,6,11,9
FIRST_D1: DB 14,6,9,19,25,5,12,14,11,5
FIRST_D2: DB 19,192,14,8,6,13,25,5,11,24
FIRST_D3: DB 5,4,17,7,4,47,5,13,48,96
FIRST_D4: DB 7,5,24,64,5,5,9,4,13,16
FIRST_D5: DB 11,7,24,16,58,5,17,24,6,12
FIRST_D6: DB 64,9,14,7,9,24,48,5,7,4
FIRST_D7: DB 7,9,14,6,128,21,8,5,19,37
FIRST_D8: DB 21,17,19,59,39,7,64,11,11,4
FIRST_D9: DB 5,19,29,8,6,48,7,11,13,51

SEC_D0: DB 207,190,106,248,240,167,97,183,182,165
SEC_D1: DB 253,240,238,147,97,222,240,244,106,194
SEC_D2: DB 97,240,235,131,183,173,194,190,118,240
SEC_D3: DB 89,248,139,133,248,53,246,139,192,192
SEC_D4: DB 227,225,192,160,190,249,209,245,161,128
SEC_D5: DB 142,143,167,192,227,236,67,240,240,192
SEC_D6: DB 240,165,235,153,165,192,240,207,133,235
SEC_D7: DB 153,165,235,192,240,129,240,225,194,47
SEC_D8: DB 129,129,231,142,139,188,240,125,106,235
SEC_D9: DB 225,231,227,240,192,240,153,129,139,139

end
