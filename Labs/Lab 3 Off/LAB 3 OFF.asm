ORG 0
	LJMP MAIN
ORG 0003H
ISREX0:	 
	JNB 0, SKIP1
	SETB TR0
	clr 0
SKIP1:	JB P3.2,EX3
	DJNZ R6 ,SKIP1
	DJNZ R7, SKIP1
	INC 50
	;LCALL ACABA
	MOV R6,#255
	MOV R7, #2
EX3:	RETI
ORG 0023h
ISRSER:	JNB RI, EX33
	CLR RI
	SETB 1
	MOV A, SBUF
	MOV 51, A
	RETI
EX33: 	CLR TI	
	RETI
	
MAIN:
	acall	CONFIGURE_LCD
	Mov IE,#10000001b
	setb IT0
	MOV 50,#0
	setb 0
	CLR 1

	MOV TMOD, #21H
	MOV SCON, #01010000B
	MOV TH1, #253
	MOV TH0, HIGH(29534)
	MOV TL0, LOW(29534)
	MOV R5, #255
	MOV R6, #255
	MOV R7, #4
	
KEYBOARD_LOOP:
	JNB TR0, JUMP
	JNB TF0, $ 
	CLR TR0
	CLR TF0
	MOV TH0, HIGH(29534)
	MOV TL0, LOW(29534)
	SETB TR0
	DJNZ R5, KEYBOARD_LOOP
	CLR TR0
	Mov IE,#10010000b
	
	ACALL ASCII
	ACALL PRINT_SCO
	SETB TR1
	

	
ca:	acall KEYBOARD
	CJNE A,#'A', CA
	
;	SETB TI
;TRANS:	JNB TI, $
	MOV A, 50
	MOV SBUF, A
	CLR TI
	
	
	
	
	JNB 1,JUMP
	acall	CONFIGURE_LCD
	lcall PRINT_DAT
JUMP:	sjmp KEYBOARD_LOOP


PRINT_DAT:
	MOV 60,50
	ACALL ACABA
	MOV A,#'|'
	ACALL SEND_DATA
	MOV 60,51
	ACALL ACABA

	mov a,#0ABH	;FORCE CURSOR TO BEGINNING OF THE SECOND LINE
	acall SEND_COMMAND
	MOV A, 50
	CJNE A, 51, LOST_P
	MOV DPTR, #DRAW
	MOV 22, #5
REP1:	CLR A
	MOVC A, @A+DPTR
	INC DPTR
	ACALL SEND_DATA
	DJNZ 22,REP1
	SJMP CONT
	
LOST_P:	JNC WON_P
	MOV DPTR, #LOST
	MOV 22, #9
REP2:	CLR A
	MOVC A, @A+DPTR
	INC DPTR
	ACALL SEND_DATA
	DJNZ 22,REP2
	SJMP CONT
	
WON_P:	MOV DPTR, #WON
	MOV 22, #8
REP3:	CLR A
	MOVC A, @A+DPTR
	INC DPTR
	ACALL SEND_DATA
	DJNZ 22,REP3
	
CONT:	RET

	





ASCII:	MOV A, 50 
	ADD A, #0
	DA A  
	MOV 50, A
	ANL A , #0F0H
	SWAP A
	ORL A,#30H
	MOV 30, A
	MOV A, 50
	ANL A , #0FH
	ORL A,#30H
	MOV 31, A
	MOV 32,30
	MOV 33,#'.'
	MOV 34, 31
	RET

PRINT_SCO:
	MOV R1,#30
	MOV 22,#8
	MOV 23,#5
	MOV DPTR, #CLICKS
here:	CLR A
	MOVC A, @A+DPTR
	INC DPTR
	ACALL SEND_DATA
	DJNZ 22,HERE
AGAIN:	MOV A,@R1
	ACALL SEND_DATA
	INC R1
	CJNE R1,#32,AGAIN
	mov a,#0ABH	;FORCE CURSOR TO BEGINNING OF THE SECOND LINE
	acall SEND_COMMAND
	MOV DPTR, #CPS
AGAIN2:	CLR A
	MOVC A, @A+DPTR
	INC DPTR
	ACALL SEND_DATA
	DJNZ 23,AGAIN2
AGAIN3:	MOV A,@R1
	ACALL SEND_DATA
	INC R1
	CJNE R1,#35,AGAIN3
	RET

ACABA:	MOV A, 60
	ANL A , #0F0H
	SWAP A
	ORL A,#30H
	ACALL SEND_DATA
	MOV A, 60
	ANL A , #0FH
	ORL A,#30H
	ACALL SEND_DATA
RET




	
CONFIGURE_LCD:	;THIS SUBROUTINE SENDS THE INITIALIZATION COMMANDS TO THE LCD
	mov a,#38H	;TWO LINES, 5X7 MATRIX
	acall SEND_COMMAND
	mov a,#0FH	;DISPLAY ON, CURSOR BLINKING
	acall SEND_COMMAND
	mov a,#06H	;INCREMENT CURSOR (SHIFT CURSOR TO RIGHT)
	acall SEND_COMMAND
	mov a,#01H	;CLEAR DISPLAY SCREEN
	acall SEND_COMMAND
	mov a,#80H	;FORCE CURSOR TO BEGINNING OF THE FIRST LINE
	acall SEND_COMMAND
	ret



SEND_COMMAND:
	mov p1,a		;THE COMMAND IS STORED IN A, SEND IT TO LCD
	clr p3.5		;RS=0 BEFORE SENDING COMMAND
	clr p3.6		;R/W=0 TO WRITE
	setb p3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	acall DELAY
	clr p3.7
	ret


SEND_DATA:
	mov p1,a		;SEND THE DATA STORED IN A TO LCD
	setb p3.5	;RS=1 BEFORE SENDING DATA
	clr p3.6		;R/W=0 TO WRITE
	setb p3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	acall DELAY
	clr p3.7
	ret


DELAY:
	push 0
	push 1
	mov r0,#50
DELAY_OUTER_LOOP:
	mov r1,#255
	djnz r1,$
	djnz r0,DELAY_OUTER_LOOP
	pop 1
	pop 0
	ret


KEYBOARD: ;takes the key pressed from the keyboard and puts it to A
	mov	P0, #0ffh	;makes P0 input
K1:
	mov	P2, #0	;ground all rows
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, K1
K2:
	acall	DELAY
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, KB_OVER
	sjmp	K2
KB_OVER:
	acall DELAY
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, KB_OVER1
	sjmp	K2
KB_OVER1:
	mov	P2, #11111110B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_0
	mov	P2, #11111101B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_1
	mov	P2, #11111011B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_2
	mov	P2, #11110111B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_3
	ljmp	K2
	
ROW_0:
	mov	DPTR, #KCODE0
	sjmp	KB_FIND
ROW_1:
	mov	DPTR, #KCODE1
	sjmp	KB_FIND
ROW_2:
	mov	DPTR, #KCODE2
	sjmp	KB_FIND
ROW_3:
	mov	DPTR, #KCODE3
KB_FIND:
	rrc	A
	jnc	KB_MATCH
	inc	DPTR
	sjmp	KB_FIND
KB_MATCH:
	clr	A
	movc	A, @A+DPTR; get ASCII code from the table 
	ret

;ASCII look-up table 
KCODE0:	DB	'1', '2', '3', 'A'
KCODE1:	DB	'4', '5', '6', 'B'
KCODE2:	DB	'7', '8', '9', 'C'
KCODE3:	DB	'*', '0', '#', 'D'


CLICKS: DB 'CLICKS: '
CPS: DB 'CPS: '

WON: DB 'YOU WON!'
DRAW: DB 'DRAW!'
LOST: DB 'YOU LOST!'

END


